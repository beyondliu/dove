#!/usr/bin/env nplc
NPL.load("dove/init")
NPL.load("cli/generator.lua")

local table_insert = table.insert
local table_remove = table.remove
local table_concat = table.concat
local deepcopy = commonlib.deepcopy
local Generator = commonlib.gettable("Dove.Generator")

local function assert_options(key, value)
    if not value then
        error(format("Invalid %s", key))
    end
end

local function create_app(options, ctx)
    Generator.gen_app()
end

local function load_local_project()
    local boot = NPL.load("boot.lua")
    if boot == false then
        error("Failed to boot the app, please make sure you are in the root folder of your app.")
    elseif type(boot) == "function" then
        boot({})
    end
end

local function print_routes()
    load_local_project()
    local Route = ActionDispatcher.Routing.Route
    Route.print()
end

local function open_console(options)
    load_local_project()
    local console = NPL.load("(gl)script/ide/System/nplcmd/embed/console.npl")
    console()
end

local function keep_server_alive(ctx)
    ctx.keep_alive = true
end

local function boot_app(options, ctx)
    load_local_project()
    keep_server_alive(ctx)
end

local function show_usage()
    local text =
        [[
Dove Web Application Framework

Usage: dove [options] [params]

Description:
  Dove is a simple web appplication framework for npl.

Options:

  help, -h              show this text
  init, -i              init dove framework on current folder
  routes, -r            show routes of current app
  console, -c           load current app with nplc console
  start, -s             start current app

]]
    print(text)
end

return function(ctx)
    local args = deepcopy(ctx.arg)
    local operation = args[1]
    assert_options("operation", operation)

    operation = operation:lower()

    table_remove(args, 1)

    if operation == "-h" or operation == "--help" then
        show_usage()
    elseif operation == "-i" or operation == "init" then
        create_app(args, ctx)
    elseif operation == "-r" or operation == "routes" then
        print_routes(args)
    elseif operation == "-c" or operation == "console" then
        open_console(args)
    elseif operation == "-s" or operation == "start" then
        boot_app(args, ctx)
    else
        print(format("Invalid operation %s", operation))
    end
end
